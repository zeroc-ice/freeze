#
# Copyright (c) ZeroC, Inc. All rights reserved.
#

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix                  ?= /opt/Freeze-$(version)

#
# The "root directory" for runpath embedded in executables. Can be set
# to change the runpath added to Ice executables.
#
# If not set, a runpath relative to the path of the executable is
# embedded (using @loader_path on OS X and $ORIGIN on Linux).
#
#embedded_runpath_prefix ?= /opt/Ice-$(mmversion)

#
# Define embedded_runpath as no if you don't want any runpath added to
# the executables. If not set, defaults to to "yes"
#
embedded_runpath        ?= yes

#
# Define OPTIMIZE as yes if you want to build with optimization.
# Otherwise Ice is build with debug information.
#
#OPTIMIZE               = yes

#
# Define PLATFORMS to the list of platforms to build. This defaults
# to the first supported platform for this system.
#
# Run `make print V=supported-platforms' to see the list of supported
# platforms on this system.
#
PLATFORMS               ?= $(firstword $(supported-platforms))

#
# Configurations to build. This defaults to the first supported
# configuration.
#
# Run `make print V=supported-configs` to see the list of supported
# configurations.
#
CONFIGS                 ?= $(firstword $(supported-configs))

#
# Third-party libraries
#
# If a third-party library is not installed in a standard location
# where the compiler can find it, set the corresponding variable
# below to the installation directory of the library.
#
#DB_HOME                ?= /opt/db
#EXPAT_HOME             ?= /opt/expat
#BZ2_HOME               ?= /opt/bz2
#MCPP_HOME              ?= /opt/mcpp

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

os                      ?= $(shell uname)

include $(top_srcdir)/config/Make.rules.$(os)
include $(top_srcdir)/config/Make.project.rules
include $(top_srcdir)/config/Make.tests.rules
include $(top_srcdir)/config/Make.freeze.rules

version                 = 3.7.10
soversion               = 37

#
# The compatversion is the lowest patch release with the same API.
# For example, if 3.7.2 introduces no new API compared to 3.7.1, we
# would set version to 3.7.2 and compatversion to 3.7.1.
# Used for OS X libraries.
#
compatversion           = $(version)

#
# Languages, platforms and configurations to build
#
supported-languages     = cpp java
supported-configs       = shared

ifeq ($(filter all cpp,$(FREEZE_BIN_DIST)),)
bindir                  ?= $(call mappingdir,$(or $1,$(currentdir)),bin)
libdir                  ?= $(call mappingdir,$(or $1,$(currentdir)),lib)
slicedir                ?= $(top_srcdir)/slice
includedir              ?= $(call mappingdir,$(or $1,$(currentdir)),include)

usr_dir_install         := $(filter /usr%,$(prefix))
install_bindir          ?= $(prefix)/bin
install_libdir          ?= $(prefix)/lib
install_includedir      ?= $(prefix)/include
install_docdir          ?= $(prefix)$(if $(usr_dir_install),/share/doc/freeze)
install_mandir          ?= $(prefix)$(if $(usr_dir_install),/share)/man
else
$(eval $(call create-project-dependencies,freeze,$(FREEZE_HOME),cpp,cpp,Freeze))
slice2freeze_path       = $(freeze_bindir)/slice2freeze
bindir                  ?= $(freeze_bindir)
libdir                  ?= $(freeze_libdir)
slicedir                ?= $(freeze_slicedir)
includedir              ?= $(freeze_includedir)
endif

#
# Support for 3rd party libraries
#
thirdparties            := bz2 db expat mcpp
bz2_home                := $(BZ2_HOME)
db_home                 := $(or $(DB_HOME),$(if $(filter Darwin,$(os)),/usr/local/opt/berkeley-db@5.3,))
db_ldflags              := -ldb_cxx
expat_home              := $(EXPAT_HOME)
mcpp_home               := $(MCPP_HOME)

$(foreach l,$(thirdparties),$(eval $(call make-lib,$l)))

db_includedir           ?= $(wildcard /usr/include/db53)
db_libdir               ?= $(wildcard /usr/lib64/db53)

#
# Support for Ice libraries
#
ifeq ($(filter all cpp,$(FREEZE_BIN_DIST)),)
shared_excludes         = IceUtil Slice
$(eval $(call load-dependencies,$(addprefix $(top_srcdir)/ice/cpp/src/,IceUtil Slice)))
endif
$(eval $(call load-dependencies,$(addprefix $(top_srcdir)/ice/cpp/test/,Common)))

ifeq ($(filter all cpp,$(ICE_BIN_DIST) $(FREEZE_BIN_DIST)),)
$(eval $(call create-project-dependencies,ice,$(top_srcdir)/ice,cpp,cpp,Ice))
else
$(eval $(call create-project-dependencies,ice,$(ICE_HOME),cpp,cpp,Ice))
endif

ifeq ($(filter all cpp,$(FREEZE_BIN_DIST)),)
freeze_cpp_cppflags := -I$(top_srcdir)/cpp/include -I$(top_srcdir)/cpp/include/generated
else
freeze_cpp_cppflags := $(if $(freeze_includedir),-I$(freeze_includedir) $(if $(freeze_src_dist),-I$(freeze_includedir)/generated))
endif
